        -:    0:Source:/home/antoine/Documents/Developpement/c/stealth/src/model/Player.c
        -:    0:Graph:/home/antoine/Documents/Developpement/c/stealth/cmake-build-debug-coverage/CMakeFiles/stealth.dir/src/model/Player.c.gcno
        -:    0:Data:/home/antoine/Documents/Developpement/c/stealth/cmake-build-debug-coverage/CMakeFiles/stealth.dir/src/model/Player.c.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include "model/Player.h"
        -:    3:#include "core/Settings.h"
        -:    4:#include "core/Util.h"
        -:    5:
        -:    6:#include <assert.h>
        -:    7:
function player_init called 2 returned 100% blocks executed 88%
        2:    8:void player_init(Player *player, int x, int y){
        -:    9:    int i;
       2*:   10:    assert(player);
        2:   10-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:   10-block  1
call    2 never executed
        2:   11:    position_init(&player->position, x, y);
        2:   11-block  0
call    0 returned 2
        2:   12:    player->mana = 0;
        2:   13:    player->speed = PLAYER_INIT_SPEED;
        2:   14:    player->direction = STILL;
        6:   15:    for(i = 0; i < SKILL_NUMBER; i++){
        6:   15-block  0
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:   16:        skill_init(&player->skills[i], i);
        4:   16-block  0
call    0 returned 4
        -:   17:    }
        2:   18:}
        -:   19:
function player_update_speed called 2181 returned 100% blocks executed 94%
     2181:   20:void player_update_speed(Player *player, Direction direction){
    2181*:   21:    assert(player);
     2181:   21-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2181
    %%%%%:   21-block  1
call    2 never executed
        -:   22:
        -:   23:    /* if the players entirely reverse his direction, his speed is reinitialized */
     2181:   24:    if(player->direction != direction
     2181:   24-block  0
branch  0 taken 1116 (fallthrough)
branch  1 taken 1065
     1116:   25:    && player->direction != direction_previous(direction)
     1116:   25-block  0
call    0 returned 1116
branch  1 taken 497 (fallthrough)
branch  2 taken 619
      497:   26:    && player->direction != direction_next(direction)){
      497:   26-block  0
call    0 returned 497
branch  1 taken 139 (fallthrough)
branch  2 taken 358
      139:   27:        player->direction = direction;
        -:   28:        /* The player changed direction, so the speed is reset at init speed */
      139:   29:        player->speed = PLAYER_INIT_SPEED;
      139:   29-block  0
        -:   30:    }
        -:   31:    /* Here we have to check if the
        -:   32:     * character has abilities that permits
        -:   33:     * to go over the normal maximum speed
        -:   34:     * */
     2181:   35:    double max_speed = skill_is_activated(&player->skills[SPEED]) ? SKILL_MAX_SPEED : PLAYER_MAX_SPEED;
     2181:   35-block  0
call    0 returned 2181
branch  1 taken 53 (fallthrough)
branch  2 taken 2128
       53:   35-block  1
     2128:   35-block  2
     2181:   36:    double new_speed = player->speed + PLAYER_INCR_SPEED;
     2181:   37:    player->speed = MIN(new_speed, max_speed); /* Cap the speed */
     2181:   37-block  0
branch  0 taken 759 (fallthrough)
branch  1 taken 1422
      759:   37-block  1
     1422:   37-block  2
     2181:   38:}
        -:   39:
function player_update_skills_state called 2107 returned 100% blocks executed 90%
     2107:   40:void player_update_skills_state(Player *player){
        -:   41:    int i;
    2107*:   42:    assert(player);
     2107:   42-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2107
    %%%%%:   42-block  1
call    2 never executed
     6321:   43:    for(i = 0; i < SKILL_NUMBER; i++){
     2107:   43-block  0
     4214:   43-block  1
     6321:   43-block  2
branch  0 taken 4214
branch  1 taken 2107 (fallthrough)
     4214:   44:        if(player->skills[i].activated
     4214:   44-block  0
branch  0 taken 72 (fallthrough)
branch  1 taken 4142
       72:   45:        && player->mana < skill_mana_consumption(&player->skills[i])){
       72:   45-block  0
call    0 returned 72
branch  1 taken 19 (fallthrough)
branch  2 taken 53
       19:   46:            skill_deactivate(&player->skills[i]);
       19:   46-block  0
call    0 returned 19
        -:   47:        }
        -:   48:    }
     2107:   49:}
        -:   50:
function player_activate_skill called 0 returned 0% blocks executed 0%
    #####:   51:void player_activate_skill(Player *player, SkillType type){
    #####:   52:    skill_check_type(type);
    %%%%%:   52-block  0
call    0 never executed
    #####:   53:    skill_activate(&player->skills[type]);
call    0 never executed
    #####:   54:}
        -:   55:
function player_deactivate_all_skills called 2107 returned 100% blocks executed 100%
     2107:   56:void player_deactivate_all_skills(Player *player){
        -:   57:    int i;
     6321:   58:    for(i = INVISIBILITY; i <= SPEED; i++){
     2107:   58-block  0
     6321:   58-block  1
branch  0 taken 4214
branch  1 taken 2107 (fallthrough)
     4214:   59:        skill_deactivate(player_skill(player, i));
     4214:   59-block  0
call    0 returned 4214
call    1 returned 4214
        -:   60:    }
     2107:   61:}
        -:   62:
function player_consume_mana called 2107 returned 100% blocks executed 100%
     2107:   63:int player_consume_mana(Player *player){
        -:   64:    int i, count, mana;
     6321:   65:    for(i = count = 0; i < SKILL_NUMBER; i++){
     2107:   65-block  0
     4214:   65-block  1
     6321:   65-block  2
branch  0 taken 4214
branch  1 taken 2107 (fallthrough)
     4214:   66:        mana = skill_mana_consumption(&player->skills[i]);
     4214:   66-block  0
call    0 returned 4214
     4214:   67:        if(skill_is_activated(&player->skills[i])
call    0 returned 4214
branch  1 taken 72 (fallthrough)
branch  2 taken 4142
       72:   68:           && player->mana >= mana){
       72:   68-block  0
branch  0 taken 55 (fallthrough)
branch  1 taken 17
       55:   69:            count += mana;
       55:   69-block  0
        -:   70:        }
        -:   71:    }
     2107:   72:    player->mana -= count;
     2107:   73:    return count;
     2107:   73-block  0
        -:   74:}
        -:   75:
function player_skill called 13085 returned 100% blocks executed 100%
    13085:   76:Skill * player_skill(const Player *player, SkillType type){
    13085:   77:    skill_check_type(type);
    13085:   77-block  0
call    0 returned 13085
    13085:   78:    return (Skill *) &player->skills[type];
        -:   79:}
