        -:    0:Source:/home/antoine/Documents/Developpement/c/stealth/src/core/Timer.c
        -:    0:Graph:/home/antoine/Documents/Developpement/c/stealth/cmake-build-debug-coverage/CMakeFiles/stealth.dir/src/core/Timer.c.gcno
        -:    0:Data:/home/antoine/Documents/Developpement/c/stealth/cmake-build-debug-coverage/CMakeFiles/stealth.dir/src/core/Timer.c.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *   This file is part of Stealth game
        -:    3: *    Yann ROUX--DAUGROIS
        -:    4: *   and Antoine Bastos
        -:    5: *   SPDX-License-Identifier: Apache-2.0
        -:    6: */
        -:    7:
        -:    8:#include "core/Timer.h"
        -:    9:#include <stdlib.h>
        -:   10:/*
        -:   11: *
        -:   12: * Note pour justification
        -:   13: * d'utilisation de gettimeofday plutôt que clock_gettime():
        -:   14: * d'après le man avec l'utilisation de CLOCK_REALTIME
        -:   15: * la capture du temps est identique à gettimeofday.
        -:   16: *
        -:   17: *
        -:   18: *
        -:   19: */
        -:   20:
        -:   21:
function timer_diff_time called 10620 returned 100% blocks executed 100%
    10620:   22:long timer_diff_time(struct timeval start, struct timeval end){
    10620:   23:    return (end.tv_sec - start.tv_sec) * 1000 + (end.tv_usec - start.tv_usec) / 1000;
    10620:   23-block  0
        -:   24:}
        -:   25:
function timer_get_delta called 10620 returned 100% blocks executed 100%
    10620:   26:long timer_get_delta(const Timer *t){
    10620:   27:    return timer_diff_time(t->start, t->end);
    10620:   27-block  0
call    0 returned 10620
        -:   28:}
        -:   29:
function timer_from_epoch called 7307 returned 100% blocks executed 100%
     7307:   30:void timer_from_epoch(long epoch, Timer *result){
     7307:   31:    result->start.tv_usec = 0;
     7307:   32:    result->start.tv_sec = 0;
     7307:   33:    result->end.tv_sec = epoch / 1000;
     7307:   34:    result->end.tv_usec = (epoch - result->end.tv_sec * 1000) * 1000;
     7307:   35:}
        -:   36:
function timer_ms_to_ss called 10618 returned 100% blocks executed 100%
    10618:   37:int timer_ms_to_ss(int ms) {
    10618:   38:    return modulo(ms / 10, 100);
    10618:   38-block  0
call    0 returned 10618
        -:   39:}
        -:   40:
function timer_ms_to_s called 10618 returned 100% blocks executed 100%
    10618:   41:int timer_ms_to_s(int ms) {
    10618:   42:    return modulo(ms / 1000, 60);
    10618:   42-block  0
call    0 returned 10618
        -:   43:}
        -:   44:
function timer_ms_to_m called 10618 returned 100% blocks executed 100%
    10618:   45:int timer_ms_to_m(int ms) {
    10618:   46:    return modulo(ms / (1000 * 60), 60);
    10618:   46-block  0
call    0 returned 10618
        -:   47:}
        -:   48:
function timer_ms_to_h called 0 returned 0% blocks executed 0%
    #####:   49:int timer_ms_to_h(int ms) {
    #####:   50:    return modulo(ms / (3.6 * 1000000), 100);
    %%%%%:   50-block  0
call    0 never executed
        -:   51:}
        -:   52:
function new_timer called 2 returned 100% blocks executed 100%
        2:   53:Timer * new_timer(){
        2:   54:    return (Timer *) calloc(1, sizeof(Timer));
        2:   54-block  0
        -:   55:}
        -:   56:
function timer_start called 2 returned 100% blocks executed 75%
        2:   57:void timer_start(Timer *t){
       2*:   58:    if(!t) return;
        2:   58-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:   58-block  1
        2:   59:    gettimeofday(&t->start, NULL);
        2:   59-block  0
call    0 returned 2
        -:   60:}
        -:   61:
function timer_update called 2108 returned 100% blocks executed 75%
     2108:   62:void timer_update(Timer *t){
    2108*:   63:    if(!t) return;
     2108:   63-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2108
    %%%%%:   63-block  1
     2108:   64:    gettimeofday(&t->end, NULL);
     2108:   64-block  0
call    0 returned 2108
        -:   65:}
        -:   66:
        -:   67:
function timer_sprintf called 10618 returned 100% blocks executed 100%
    10618:   68:void timer_sprintf(const Timer *t, char *buffer){
        -:   69:    int s, m, ss;
    10618:   70:    unsigned long ms = timer_get_delta(t);
    10618:   70-block  0
call    0 returned 10618
    10618:   71:    ss = timer_ms_to_ss((int) ms);
call    0 returned 10618
    10618:   72:    s = timer_ms_to_s(ms);
call    0 returned 10618
    10618:   73:    m = timer_ms_to_m(ms);
call    0 returned 10618
        -:   74:    /* @Todo improve function by not printing zero values */
    10618:   75:    sprintf(buffer, "%02d:%02d:%02d", m, s, ss);
    10618:   76:}
        -:   77:
function timer_fprint called 0 returned 0% blocks executed 0%
    #####:   78:void timer_fprint(const Timer *t, FILE * stream){
        -:   79:    int ss, s, m, h;
        -:   80:    unsigned long ms;
    #####:   81:    ms = timer_get_delta(t);
    %%%%%:   81-block  0
call    0 never executed
    #####:   82:    ss = timer_ms_to_ss((int) ms);
call    0 never executed
    #####:   83:    s = timer_ms_to_s((int) ms);
call    0 never executed
    #####:   84:    m = timer_ms_to_m((int) ms);
call    0 never executed
    #####:   85:    h = timer_ms_to_h((int) ms);
call    0 never executed
    #####:   86:    fprintf(stream, "%02d:%02d:%02d:%02d", h, m, s, ss);
call    0 never executed
    #####:   87:}
        -:   88:
function timer_print called 0 returned 0% blocks executed 0%
    #####:   89:void timer_print(const Timer *t){
    #####:   90:    timer_fprint(t, stdout);
    %%%%%:   90-block  0
call    0 never executed
    #####:   91:}
